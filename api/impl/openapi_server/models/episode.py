# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Episode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, episode_id: str=None, client_id: str=None, healthcare_provider_id: str=None, start_date: date=None, end_date: date=None, status: str=None, episode_type: str=None, physician_id: str=None):  # noqa: E501
        """Episode - a model defined in OpenAPI

        :param episode_id: The episode_id of this Episode.  # noqa: E501
        :type episode_id: str
        :param client_id: The client_id of this Episode.  # noqa: E501
        :type client_id: str
        :param healthcare_provider_id: The healthcare_provider_id of this Episode.  # noqa: E501
        :type healthcare_provider_id: str
        :param start_date: The start_date of this Episode.  # noqa: E501
        :type start_date: date
        :param end_date: The end_date of this Episode.  # noqa: E501
        :type end_date: date
        :param status: The status of this Episode.  # noqa: E501
        :type status: str
        :param episode_type: The episode_type of this Episode.  # noqa: E501
        :type episode_type: str
        :param physician_id: The physician_id of this Episode.  # noqa: E501
        :type physician_id: str
        """
        self.openapi_types = {
            'episode_id': str,
            'client_id': str,
            'healthcare_provider_id': str,
            'start_date': date,
            'end_date': date,
            'status': str,
            'episode_type': str,
            'physician_id': str
        }

        self.attribute_map = {
            'episode_id': 'episode_id',
            'client_id': 'client_id',
            'healthcare_provider_id': 'healthcare_provider_id',
            'start_date': 'start_date',
            'end_date': 'end_date',
            'status': 'status',
            'episode_type': 'episode_type',
            'physician_id': 'physician_id'
        }

        self._episode_id = episode_id
        self._client_id = client_id
        self._healthcare_provider_id = healthcare_provider_id
        self._start_date = start_date
        self._end_date = end_date
        self._status = status
        self._episode_type = episode_type
        self._physician_id = physician_id

    @classmethod
    def from_dict(cls, dikt) -> 'Episode':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Episode of this Episode.  # noqa: E501
        :rtype: Episode
        """
        return util.deserialize_model(dikt, cls)

    @property
    def episode_id(self) -> str:
        """Gets the episode_id of this Episode.


        :return: The episode_id of this Episode.
        :rtype: str
        """
        return self._episode_id

    @episode_id.setter
    def episode_id(self, episode_id: str):
        """Sets the episode_id of this Episode.


        :param episode_id: The episode_id of this Episode.
        :type episode_id: str
        """

        self._episode_id = episode_id

    @property
    def client_id(self) -> str:
        """Gets the client_id of this Episode.


        :return: The client_id of this Episode.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id: str):
        """Sets the client_id of this Episode.


        :param client_id: The client_id of this Episode.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def healthcare_provider_id(self) -> str:
        """Gets the healthcare_provider_id of this Episode.


        :return: The healthcare_provider_id of this Episode.
        :rtype: str
        """
        return self._healthcare_provider_id

    @healthcare_provider_id.setter
    def healthcare_provider_id(self, healthcare_provider_id: str):
        """Sets the healthcare_provider_id of this Episode.


        :param healthcare_provider_id: The healthcare_provider_id of this Episode.
        :type healthcare_provider_id: str
        """

        self._healthcare_provider_id = healthcare_provider_id

    @property
    def start_date(self) -> date:
        """Gets the start_date of this Episode.


        :return: The start_date of this Episode.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: date):
        """Sets the start_date of this Episode.


        :param start_date: The start_date of this Episode.
        :type start_date: date
        """

        self._start_date = start_date

    @property
    def end_date(self) -> date:
        """Gets the end_date of this Episode.


        :return: The end_date of this Episode.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: date):
        """Sets the end_date of this Episode.


        :param end_date: The end_date of this Episode.
        :type end_date: date
        """

        self._end_date = end_date

    @property
    def status(self) -> str:
        """Gets the status of this Episode.


        :return: The status of this Episode.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Episode.


        :param status: The status of this Episode.
        :type status: str
        """

        self._status = status

    @property
    def episode_type(self) -> str:
        """Gets the episode_type of this Episode.


        :return: The episode_type of this Episode.
        :rtype: str
        """
        return self._episode_type

    @episode_type.setter
    def episode_type(self, episode_type: str):
        """Sets the episode_type of this Episode.


        :param episode_type: The episode_type of this Episode.
        :type episode_type: str
        """

        self._episode_type = episode_type

    @property
    def physician_id(self) -> str:
        """Gets the physician_id of this Episode.


        :return: The physician_id of this Episode.
        :rtype: str
        """
        return self._physician_id

    @physician_id.setter
    def physician_id(self, physician_id: str):
        """Sets the physician_id of this Episode.


        :param physician_id: The physician_id of this Episode.
        :type physician_id: str
        """

        self._physician_id = physician_id
